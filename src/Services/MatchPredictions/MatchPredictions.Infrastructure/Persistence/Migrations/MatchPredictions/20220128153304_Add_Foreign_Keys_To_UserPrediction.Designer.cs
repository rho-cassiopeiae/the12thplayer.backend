// <auto-generated />
using System;
using System.Collections.Generic;
using MatchPredictions.Application.Common.Dto;
using MatchPredictions.Domain.Aggregates.Fixture;
using MatchPredictions.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MatchPredictions.Infrastructure.Persistence.Migrations.MatchPredictions
{
    [DbContext(typeof(MatchPredictionsDbContext))]
    [Migration("20220128153304_Add_Foreign_Keys_To_UserPrediction")]
    partial class Add_Foreign_Keys_To_UserPrediction
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("match_predictions")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("MatchPredictions.Application.Playtime.Queries.GetActiveFixturesForTeam.ActiveSeasonRoundWithFixturesDto", b =>
                {
                    b.Property<string>("LeagueLogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("LeagueName")
                        .HasColumnType("text");

                    b.Property<long>("RoundId")
                        .HasColumnType("bigint");

                    b.Property<string>("RoundName")
                        .HasColumnType("text");

                    b.Property<long>("SeasonId")
                        .HasColumnType("bigint");

                    b.ToView("ActiveSeasonRounds");
                });

            modelBuilder.Entity("MatchPredictions.Application.Playtime.Queries.GetActiveFixturesForTeam.FixtureDto", b =>
                {
                    b.Property<GameTimeDto>("GameTime")
                        .HasColumnType("jsonb");

                    b.Property<string>("GuestTeamLogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("GuestTeamName")
                        .HasColumnType("text");

                    b.Property<string>("HomeTeamLogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("HomeTeamName")
                        .HasColumnType("text");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("RoundId")
                        .HasColumnType("bigint");

                    b.Property<ScoreDto>("Score")
                        .HasColumnType("jsonb");

                    b.Property<long>("SeasonId")
                        .HasColumnType("bigint");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.ToView("ActiveFixtures");
                });

            modelBuilder.Entity("MatchPredictions.Domain.Aggregates.Country.Country", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("FlagUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("MatchPredictions.Domain.Aggregates.Fixture.Fixture", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<GameTime>("GameTime")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<long>("GuestTeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("HomeTeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoundId")
                        .HasColumnType("bigint");

                    b.Property<Score>("Score")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<long>("SeasonId")
                        .HasColumnType("bigint");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GuestTeamId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("RoundId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Fixtures");
                });

            modelBuilder.Entity("MatchPredictions.Domain.Aggregates.League.League", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsCup")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("MatchPredictions.Domain.Aggregates.League.Season", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("Season");
                });

            modelBuilder.Entity("MatchPredictions.Domain.Aggregates.Round.Round", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("EndDate")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean");

                    b.Property<int>("Name")
                        .HasColumnType("integer");

                    b.Property<long>("SeasonId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StartDate")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("MatchPredictions.Domain.Aggregates.Team.Team", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("MatchPredictions.Domain.Aggregates.Team.TeamActiveSeasons", b =>
                {
                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<List<long>>("ActiveSeasons")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("TeamId");

                    b.ToTable("TeamActiveSeasons");
                });

            modelBuilder.Entity("MatchPredictions.Domain.Aggregates.UserPrediction.UserPrediction", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("SeasonId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoundId")
                        .HasColumnType("bigint");

                    b.Property<IReadOnlyDictionary<string, string>>("FixtureIdToScore")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("UserId", "SeasonId", "RoundId");

                    b.HasIndex("RoundId");

                    b.HasIndex("SeasonId");

                    b.ToTable("UserPredictions");
                });

            modelBuilder.Entity("MatchPredictions.Domain.Aggregates.Fixture.Fixture", b =>
                {
                    b.HasOne("MatchPredictions.Domain.Aggregates.Team.Team", null)
                        .WithMany()
                        .HasForeignKey("GuestTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchPredictions.Domain.Aggregates.Team.Team", null)
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchPredictions.Domain.Aggregates.Round.Round", null)
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchPredictions.Domain.Aggregates.League.Season", null)
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchPredictions.Domain.Aggregates.League.Season", b =>
                {
                    b.HasOne("MatchPredictions.Domain.Aggregates.League.League", null)
                        .WithMany("Seasons")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchPredictions.Domain.Aggregates.Round.Round", b =>
                {
                    b.HasOne("MatchPredictions.Domain.Aggregates.League.Season", null)
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchPredictions.Domain.Aggregates.Team.Team", b =>
                {
                    b.HasOne("MatchPredictions.Domain.Aggregates.Country.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchPredictions.Domain.Aggregates.Team.TeamActiveSeasons", b =>
                {
                    b.HasOne("MatchPredictions.Domain.Aggregates.Team.Team", null)
                        .WithOne("ActiveSeasons")
                        .HasForeignKey("MatchPredictions.Domain.Aggregates.Team.TeamActiveSeasons", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchPredictions.Domain.Aggregates.UserPrediction.UserPrediction", b =>
                {
                    b.HasOne("MatchPredictions.Domain.Aggregates.Round.Round", null)
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchPredictions.Domain.Aggregates.League.Season", null)
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchPredictions.Domain.Aggregates.League.League", b =>
                {
                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("MatchPredictions.Domain.Aggregates.Team.Team", b =>
                {
                    b.Navigation("ActiveSeasons");
                });
#pragma warning restore 612, 618
        }
    }
}
