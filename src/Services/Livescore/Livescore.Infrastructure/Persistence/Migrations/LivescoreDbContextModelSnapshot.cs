// <auto-generated />
using System;
using Livescore.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Livescore.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(LivescoreDbContext))]
    partial class LivescoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("livescore")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Livescore.Domain.Aggregates.Country.Country", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("FlagUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Livescore.Domain.Aggregates.Manager.Manager", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("BirthDate")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("TeamId")
                        .IsUnique();

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Livescore.Domain.Aggregates.Team.Team", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasThe12thPlayerCommunity")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Livescore.Domain.Aggregates.Venue.Venue", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId")
                        .IsUnique();

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("Livescore.Domain.Aggregates.Manager.Manager", b =>
                {
                    b.HasOne("Livescore.Domain.Aggregates.Country.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Livescore.Domain.Aggregates.Team.Team", null)
                        .WithOne()
                        .HasForeignKey("Livescore.Domain.Aggregates.Manager.Manager", "TeamId");
                });

            modelBuilder.Entity("Livescore.Domain.Aggregates.Team.Team", b =>
                {
                    b.HasOne("Livescore.Domain.Aggregates.Country.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Livescore.Domain.Aggregates.Venue.Venue", b =>
                {
                    b.HasOne("Livescore.Domain.Aggregates.Team.Team", null)
                        .WithOne()
                        .HasForeignKey("Livescore.Domain.Aggregates.Venue.Venue", "TeamId");
                });
#pragma warning restore 612, 618
        }
    }
}
